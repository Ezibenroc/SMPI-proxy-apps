* Benchmarks in details
** Working benchmarks :
*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/mdtest/][MDTest]]
**** Brief description : 
mdtest is a program that measures performance of various metadata operations. It uses MPI to coordinate the operations and to collect the results.   
The code is composed of one C file, mdtest.c. 
**** Build and run :   
The execution should done with 2 proc.
#+BEGIN_SRC sh :tangle bin/MDTest.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/mdtest
     mkdir Benchmarks || true
     cd Benchmarks
     echo "Download the source"
     test -e mdtest-source.tgz || curl -o mdtest-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Mar29/mdtest-1.8.4.tar

     echo "Unpack the code"
     mkdir mdtest && tar -xvf mdtest-source.tgz -C mdtest --strip-components 1
 
     echo "Install the modified sources"
     cd mdtest
     cp -f ../../src/mdtest/* ./
     cp -f ../../src/common/* ./

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./mdtest --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes
 #+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/stream/][Stream]]
**** Brief description : 
STREAM is a simple, synthetic benchmark designed to measure sustainable memory bandwidth (in MB/s) and a corresponding computation rate for four simple vector kernels.
**** Build and run :   
#+BEGIN_SRC sh :tangle bin/stream.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/steam
     mkdir -p Benchmarks/stream || true
     cd Benchmarks
     echo "Download the source"
     test -e stream-source.tgz || curl -o stream-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/stream.tar

     echo "Unpack the code"
     tar -xvf stream-source.tgz -C stream
 
     echo "Install the modified sources"
     pwd
     cp -f ../src/stream/* stream/
     cp -f ../src/common/* stream/
     cd stream

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./stream_c.exe
 #+END_SRC
 
*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/stream/][MiniEF]]
**** Brief description : 
miniFE is a Finite Element mini-application which implements a couple of kernels representative of implicit finite-element applications.
**** Build and run :   
#+BEGIN_SRC sh :tangle bin/MiniEF.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/MiniEF-evo
     mkdir -p Benchmarks/ || true
     cd Benchmarks
     echo "Download the source"
     test -e MiniEF-source.tgz || curl -o MiniEF-source.tgz -Lk https://mantevo.org/downloads/releaseTarballs/miniapps/MiniFE/miniFE_ref-2.0.tgz

     echo "Unpack the code"
     tar -xvf MiniEF-source.tgz
     rm -rf miniFE-2.0_openmp_ref.tgz
     tar -xvf miniFE-2.0_ref.tgz && mv miniFE-2.0_ref  MiniEF-evo
 
     echo "Install the modified sources"
     cp -f ../src/MiniEF-evo/* MiniEF-evo/src/
     cp -f ../src/common/* MiniEF-evo/src/
     cd MiniEF-evo/src

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./miniFE.x
 #+END_SRC

*** Monte-carlo
**** Brief description : 
**** Extra dependencies:
libgmp-dev
**** Integral-basic :   
#+BEGIN_SRC sh :tangle bin/CodeVault_IntegralBasic.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ || true
     cd Benchmarks
     echo "Checkout or update the git containing the source code"
     if [ -e CodeVault ] ; then
        cd CodeVault ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://repository.prace-ri.eu/git/PRACE/CodeVault.git
     fi

     echo "Install the modified sources"
     cp ../src/CodeVault/monte_carlo_methods/integral_basic/* CodeVault/hpc_kernel_samples/monte_carlo_methods/integral_basic/

     echo "Compile it"
     cd CodeVault/hpc_kernel_samples/monte_carlo_methods/integral_basic/
     mkdir build
     cd build/
     cmake -Denable_smpi=ON ..
     make 
     
     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./7_montecarlo_integral1d_mpi 100 
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./7_montecarlo_integral1d_serial 100

 #+END_SRC

**** Prime :   
#+BEGIN_SRC sh :tangle bin/CodeVault_Prime.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/CodeVault
     mkdir -p Benchmarks/ || true
     cd Benchmarks
     echo "Checkout or update the git containing the source code"
     if [ -e CodeVault ] ; then
        cd CodeVault ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://repository.prace-ri.eu/git/PRACE/CodeVault.git
     fi

     echo "Install the modified sources"
     cp ../src/CodeVault/monte_carlo_methods/prime/* CodeVault/hpc_kernel_samples/monte_carlo_methods/prime/

     echo "Compile it"
     cd CodeVault/hpc_kernel_samples/monte_carlo_methods/prime
     mkdir build
     cd build/
     cmake -Denable_smpi=ON ..
     make 

     cp ../../../../../../src/common/* ./

     echo "Run it"
#     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./7_montecarlo_prime 100 

 #+END_SRC

 #+RESULTS:

**** Pi :   
#+BEGIN_SRC sh :tangle bin/CodeVault_Pi.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/CodeVault
     mkdir -p Benchmarks/ || true
     cd Benchmarks
     echo "Checkout or update the git containing the source code"
     if [ -e CodeVault ] ; then
        cd CodeVault ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://repository.prace-ri.eu/git/PRACE/CodeVault.git
     fi

     echo "Install the modified sources"
     cp ../src/CodeVault/monte_carlo_methods/pi/* CodeVault/hpc_kernel_samples/monte_carlo_methods/pi/

     echo "Compile it"
     cd CodeVault/hpc_kernel_samples/monte_carlo_methods/pi 
     mkdir build
     cd build/
     cmake -Denable_smpi=ON ..
     make 

     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./7_montecarlo_pi_mpi 10 100 

 #+END_SRC

**** Prng :   
#+BEGIN_SRC sh :tangle bin/CodeVault_Prng.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/CodeVault
     mkdir -p Benchmarks/ || true
     cd Benchmarks
     echo "Checkout or update the git containing the source code"
     if [ -e CodeVault ] ; then
        cd CodeVault ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://repository.prace-ri.eu/git/PRACE/CodeVault.git
     fi

     echo "Install the modified sources"
     cp ../src/CodeVault/monte_carlo_methods/prng/* CodeVault/hpc_kernel_samples/monte_carlo_methods/prng/

     echo "Compile it"
     cd CodeVault/hpc_kernel_samples/monte_carlo_methods/prng 
     mkdir build
     cd build/
     cmake -Denable_smpi=ON ..
     make 

     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./7_montecarlo_prng_mpi 10 100 --cfg=smpi/host-speed:10

 #+END_SRC

*** N-Body methods  
**** Brief description : 
**** Dynamic sparse data exchange :   
#+BEGIN_SRC sh :tangle bin/CodeVault_DynSparse.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
          mkdir -p Benchmarks/ || true
     cd Benchmarks
     echo "Checkout or update the git containing the source code"
     if [ -e CodeVault ] ; then
        cd CodeVault ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://repository.prace-ri.eu/git/PRACE/CodeVault.git
     fi

     echo "Install the modified sources"
     cp ../src/CodeVault/n-body_methods/dynamic_sparse_data_exchange/* CodeVault/hpc_kernel_samples/n-body_methods/dynamic_sparse_data_exchange/

     echo "Compile it"
     cd CodeVault/hpc_kernel_samples/n-body_methods/dynamic_sparse_data_exchange/
     mkdir build
     cd build/
     cmake -Denable_smpi=ON ..
     make 
     
     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./4_nbody_dsde 

 #+END_SRC

** Running issues :  
*** [[http://mantevo.org/downloads/miniSMAC2D_2.0.html][MiniSMAC2D]]
**** Brief description : 
The code is incompressible Navier-Stokes flow solver.
**** Build and run  
The localization of input file should be changed.
The code run but at some level it kills the simulation before reaching mpi_finalize.
#+BEGIN_SRC shell :tangle bin/MiniSMAC2D.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

  echo "Clean up the place" 
  sh -xe
  rm -rf Benchmarks/miniSMAC2D
  mkdir -p Benchmarks/miniSMAC2D
  cd Benchmarks
  echo "Download the source code and data on need"
  test -e miniSMAC2D-source.tgz || curl -o miniSMAC2D-source.tgz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/MiniSMAC2D/miniSMAC2D-2.0.tgz
  test -r miniSMAC2D-data-7k.tgz || curl -o miniSMAC2D-data-7k.tgz -Lk http://mantevo.org/downloads/Test_case_7kx7k.tar.gz
  
  echo "Unpack everything"
  tar -xvf miniSMAC2D-source.tgz -C miniSMAC2D --strip-components 1
  cd miniSMAC2D
  mkdir data
  cd data 
  tar -xvf ../../miniSMAC2D-data-7k.tgz
  cd ..

  echo "Install the modified sources"
  cp ../../src/miniSMAC2D/* ./
  cp ../../src/common/* ./

  echo "Compile it"
  make 

  echo "Run it"
  smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./smac2d_mpi_and_threads_with_AVX
  
#   set +e # back to non-paranoid mode
#+END_SRC

*** [[https://asc.llnl.gov/CORAL-benchmarks/Summaries/AMG2013_Summary_v2.3.pdf][AMG2013]]
**** Brief description : 
AMG is a parallel algebraic multigrid solver for linear systems arising from problems on unstructured grids.
**** Build and run  
   The code has a deadlock or maybe it's not perfectly clean.
#+BEGIN_SRC sh :tangle bin/AMG2013.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/AMG2013
     mkdir -p Benchmarks/AMG2013
     cd Benchmarks
     echo "Download the source code"
     test -e amg2013-source.tgz || curl -o amg2013-source.tgz -Lk https://asc.llnl.gov/CORAL-benchmarks/Throughput/amg20130624.tgz

     echo "Unpack the code"
     tar -xvf amg2013-source.tgz -C AMG2013 --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../src/common/* AMG2013/test/
     cp -f ../src/AMG2013/*.include AMG2013/
     cd AMG2013/

     echo "Compile it"
     make
     cd test/

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./amg2013 -pooldist 1 -r 12 12 12
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/psnap/][PSNAP]]
**** Brief description : 
PSNAP (PAL System Noise Activity Program) consists of a spin loop that is calibrated to take a given amount of time (typically 1 ms). This loop is repeated for a number of iterations.
**** Build and run  
Deadlock (Running no stop).
#+BEGIN_SRC sh :tangle bin/PSNAP.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/mdtest
     cd Benchmarks
     echo "Download the source code"
     test -e psnap-source.tgz || curl -o psnap-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/June28/psnap-1.2June28.tar

     echo "Unpack the code"
     mkdir psnap && tar -xvf psnap-source.tgz -C psnap --strip-components 1
 
     echo "Install the modified sources"
     cd psnap
     cp -f ../../src/psnap/* ./
     cp -f ../../src/common/* ./

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./psnap
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/smb/][SMB]]
**** Brief description : 
It include two benchmarks :  
- The msg_rate test measures the sustained MPI message rate using a communication pattern found in many real applications.
- The mpi_overhead test uses a post-work-wait method using MPI non-blocking send and receive calls to measure the user level overhead of the respective MPI calls.
**** Build and run  
- mpi_overhead : 
hostfile note found if one use ./run_script.
Or Very slow (Running no stop) if one use the standart runing command. 
#+BEGIN_SRC sh :tangle bin/SMB.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/smb
     mkdir -p Benchmarks
     cd Benchmarks
     echo "Download the source code"
     test -e smb-source.tgz || curl -o smb-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/smb1.0-1.tar

     echo "Unpack the code"
     mkdir smb && tar -xvf smb-source.tgz -C smb --strip-components 1

     echo "Install the modified sources"
     cp -f ../src/smb/mpi_overhead/* smb/src/mpi_overhead/
     cp -f ../src/common/* smb/src/mpi_overhead/
     cd smb/src/mpi_overhead/


     echo "Compile it"
     make

     echo "Run it"
     ./run_script 
#+END_SRC

- msg_rate :
Building issue.
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/smb
     mkdir -p Benchmarks
     cd Benchmarks
     echo "Download the source code"
     test -e smb-source.tgz || curl -o smb-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/smb1.0-1.tar

     echo "Unpack the code"
     mkdir smb && tar -xvf smb-source.tgz -C smb --strip-components 1

     echo "Install the modified sources"
     cp -f ../src/smb/msgrate/* smb/src/msgrate/
     cp -f ../src/common/* smb/src/msgrate/
     cd smb/src/msgrate/
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/ziatest/][ZiaTest]]
**** Brief description : 
It executes a new proposed standard benchmark method for MPI startup that is intended to provide a realistic assessment of
both launch and wireup requirements. Accordingly, it exercises both the launch system of the environment and the interconnect subsystem in a specified pattern.
**** Build and run : 
To run the code one has to give 3 args as inputs.
It's required by MPI-2, this is currently not supported by SMPI.
#+BEGIN_SRC sh :tangle bin/ZiaTest.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/ziatest
     mkdir -p Benchmarks/ziatest
     cd Benchmarks
     echo "Download the source code"
     test -e ziatest-source.tgz || curl -o ziatest-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/ziatest.tar

     echo "Unpack the code"
     cd ziatest
     tar -xvf ../ziatest-source.tgz

     echo "Install the modified sources"
     cp -f ../../src/ziatest/* ./
     cp -f ../../src/common/* ./

     echo "Compile it"
     make 

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./ziaprobe 4 4 2
 #+END_SRC

*** MiniXcye
**** Brief description 
This code is a simple linear circuit simulator with a basic parser that performs transient analysis. 
**** Build and run  
Running issue.
#+BEGIN_SRC sh :tangle bin/MiniXcye.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/miniXyce
     mkdir -p Benchmarks/
     cd Benchmarks
     echo "Download the source code"
     test -e miniXyce-source.tar.gz || curl -o miniXyce-source.tar.gz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/MiniXyce/miniXyce_1.0.tar.gz
          
     echo "Unpack the code"
     mkdir miniXyce && tar -xvf miniXyce-source.tar.gz -C miniXyce --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../src/miniXyce/* miniXyce/miniXyce_ref/
     cp -f ../src/common/* miniXyce/miniXyce_ref/
     cd miniXyce/miniXyce_ref/

     echo "Compile it"
     make
     make

     echo "Run it"
     smpirun -np 3 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./miniXyce.x --circuit tests/cir1.net --t_start 1e-6 --pf params.txt
 #+END_SRC

*** HPCCG
**** Brief description 
HPCCG is a simple conjugate gradient benchmark code for a 3D chimney domain on an arbitrary number of processors.
**** Build and run  
Running issue.
#+BEGIN_SRC sh :tangle bin/HPCCG.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/HPCCG
     mkdir -p Benchmarks/
     cd Benchmarks
     echo "Download the source code"
     test -e HPCCG-source.tgz || curl -o HPCCG-source.tgz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/HPCCG/HPCCG-1.0.tar.gz

     echo "Unpack the code"
     mkdir HPCCG && tar -xvf HPCCG-source.tgz -C HPCCG --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../src/HPCCG/* HPCCG/
     cp -f ../src/common/* HPCCG/
     cd HPCCG/

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./test_HPCCG 3 5 2
 #+END_SRC

*** MiniAMR
**** Brief description 
HPCCG is a simple conjugate gradient benchmark code for a 3D chimney domain on an arbitrary number of processors.
**** Build and run  
Running issue.
#+BEGIN_SRC sh :tangle bin/MiniAMR.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/MiniAMR
     mkdir -p Benchmarks/
     cd Benchmarks
     echo "Download the source code"
     test -e MiniAMR-source.tgz || curl -o MiniAMR-source.tgz -Lk https://mantevo.org/downloads/releaseTarballs/miniapps/MiniAMR/miniAMR_1.0_ref.tgz

     echo "Unpack the code"
     tar -xvf MiniAMR-source.tgz && mv miniAMR_ref MiniAMR
 
     echo "Install the modified sources"
     cp -f ../src/MiniAMR/* MiniAMR/
     cp -f ../src/common/* MiniAMR/
     cd MiniAMR/

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 16 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./miniAMR.x --num_refine 4 --max_blocks 4000 --init_x 1 --init_y 1 --init_z 1 --npx 4 --npy 2 --npz 2 --nx 8 --ny 8 --nz 8 --num_objects 2 --object 2 0 -1.10 -1.10 -1.10 0.030 0.030 0.030 1.5 1.5 1.5 0.0 0.0 0.0 --object 2 0 0.5 0.5 1.76 0.0 0.0 -0.025 0.75 0.75 0.75 0.0 0.0 0.0 --num_tsteps 100 --checksum_freq 4 --stages_per_ts 16
 #+END_SRC

** Building issues :
*** [[https://asc.llnl.gov/CORAL-benchmarks/Summaries/HACC_IO_Summary_v1.0.pdf][HACC_IO]]
**** Brief description : 
The HACC I/O benchmark capture the I/O patterns of the HACC simulation code.
**** Build and run  
   Building issue due to using smpicxx instead of mpicxx
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/HACC_IO
     mkdir -p Benchmarks/
     cd Benchmarks
     echo "Download the source code"
     test -e HACC_IO-source.tar.gz || curl -o HACC_IO-source.tar.gz -Lk https://asc.llnl.gov/CORAL-benchmarks/Skeleton/HACC_IO.tar.gz
          
     echo "Unpack the code"
     mkdir HACC_IO && tar -xvf HACC_IO-source.tar.gz -C HACC_IO --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../src/HACC_IO/* HACC_IO/
     cp -f ../src/common/* HACC_IO/
     cd HACC_IO/
     
     echo "Compile it"
     make

     echo "Run it"
    #  smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./HACC_IO 
#+END_SRC

*** [[https://asc.llnl.gov/CORAL-benchmarks/Summaries/KMI_Summary_v1.1.pdf][KMI_HASH]]
**** Brief description : 
KMI_HASH evaluate the performance of the architecture integer operations, specifically for hashing, and for memory-intensive genomics applications. 
**** Build and run  
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/KMI_HASH
     mkdir -p Benchmarks/
     cd Benchmarks
     echo "Download the source code"
     test -e KMI_HASH-source.tar.gz || curl -o KMI_HASH-source.tar.gz -Lk https://asc.llnl.gov/CORAL-benchmarks/Datacentric/KMI_HASH_CORAL.tar.gz

     echo "Unpack the code"
     mkdir KMI_HASH && tar -xvf KMI_HASH-source.tar.gz -C KMI_HASH --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../src/kmi_hash/src/* KMI_HASH/src/
     cp -f ../src/kmi_hash/tests/* KMI_HASH/tests/
     cp -f ../src/common/* KMI_HASH/tests/
     cd KMI_HASH/src/

     echo "Compile it"
     make
     cd ../tests/
     make

     echo "Run it"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./kmi_hash 
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/mpimemu/][MPIMemu]]
**** Brief description : 
The code is a simple tool that helps approximate MPI library memory usage as a function of scale.  It takes samples of /proc/meminfo (node level)
 and /proc/self/status (process level) and outputs the min, max and avg values for a specified period of time.
**** Build and run  
Smpi building issue.
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/mpimemu
     mkdir -p Benchmarks/
     cd Benchmarks
     echo "Download the source code"
     test -e mpimemu-source.tar.gz || curl -o mpimemu-source.tar.gz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/July5/mpimemu-1.0-rc6July5.tar

     echo "Unpack the code"
     mkdir mpimemu && tar -xvf mpimemu-source.tar.gz -C mpimemu --strip-components 1

     echo "Install the modified sources"
     cp -f ../src/mpimemu/configure mpimemu/
     cp -f ../src/common/* mpimemu/src/

     echo "Configure it"
     cd mpimemu-1.0-rc6July5/
     ./configure

     echo "Compile it"
     make 
     cd src/

     echo "Run it"
 #+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/omb-mpi-tests/][OMB_MPI]]
**** Brief description : 
The Ohio MicroBenchmark suite is a collection of independent MPI message passing performance microbenchmarks developed and written at The Ohio State University.
  It includes traditional benchmarks and performance measures such as latency, bandwidth and host overhead and can be used for both traditional and GPU-enhanced nodes.
**** Build and run  
SMPI building issue.
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/OMB_MPI
     mkdir -p Benchmarks/
     cd Benchmarks
     echo "Download the source code"
     test -e OMB_MPI-source.tar.gz || curl -o OMB_MPI-source.tar.gz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/July12/osu-micro-benchmarks-3.8-July12.tar

     echo "Unpack the code"
     mkdir OMB_MPI && tar -xvf OMB_MPI-source.tar.gz -C OMB_MPI --strip-components 1

     echo "Install the modified sources"
     cp -f ../src/OMB_MPI/configure OMB_MPI/
     cp -f ../src/OMB_MPI/* OMB_MPI/mpi/pt2pt
     cp -f ../src/common/* OMB_MPI/mpi/pt2pt
     
     cd OMB_MPI/

     ./configure
 #+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/minife/][MiniFE]]
**** Brief description : 
FE is a Finite Element mini-application which implements a couple of kernels representative of implicit finite-element applications. 
It assembles a sparse linear-system from the steady-state conduction equation on a brick-shaped problem domain of linear 8-node hex elements.
**** Build and run  
   Building issue due to using smpicxx instead of mpicxx
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/MiniFE
     mkdir -p Benchmarks/
     cd Benchmarks
     echo "Download the source code"
     test -e MiniFE-source.tar || curl -o MiniFE-source.tar -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Feb22/MiniFE_ref_1.4b.tar
          
     echo "Unpack the code"
     mkdir MiniFE && tar -xvf MiniFE-source.tar -C MiniFE --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../src/MiniFE/* MiniFE/
     cp -f ../src/common/* MiniFE/
     cd MiniFE/

     echo "Compile it"
     make

     echo "Run it"
#+END_SRC

 *** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/minife/][Parallel_IO]]
**** Brief description : 
This code demonstrate the basic usage of MPI parallel I/O.
**** Build and run  
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/MiniFE
     mkdir -p Benchmarks/
     cd Benchmarks

     echo "Checkout or update the git containing the source code"
     if [ -e CodeVault ] ; then
        cd CodeVault ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://repository.prace-ri.eu/git/PRACE/CodeVault.git
     fi

     echo "Install the modified sources"
     cp ../src/paralle_io/* parallel_io/

     echo "Compile it"
     cd CodeVault/hpc_kernel_samples/
     mkdir build
     cd build/
     cmake ..
     make 

     echo "Run it"
#+END_SRC

 *** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/gtc/][GTC]]
**** Brief description : 
GTC is used for Gyrokinetic Particle Simulation of Turbulent Transport in Burning Plasmas.
**** Build and run  
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/GTC
     mkdir -p Benchmarks/
     cd Benchmarks

     echo "Download the source code"
     test -e GTC-source.tar || curl -o GTC-source.tar -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/May31/TrN8GTCMay30.tar

     echo "Unpack the code"
     mkdir GTC && tar -xvf GTC-source.tar -C GTC --strip-components 1

     echo "Install the modified sources"
     cp ../src/GTC/* GTC/source/
     cp -f ../src/common/* GTC/source/

     echo "Compile it"
     cd GTC/source/
     make 

     echo "Run it"
#+END_SRC

* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:

