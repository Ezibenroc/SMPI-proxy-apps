* Benchmarks in details
** Working benchmarks :
*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/mdtest/][mdtest]]
**** Brief description : 
mdtest is a program that measures performance of various metadata operations. It uses MPI to coordinate the operations and to collect the results.   
The code is composed of one C file, mdtest.c. 
**** Build and run :   
The execution should done with 2 proc.
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/mdtest
     cd Benchmarks
     echo "Download the source"
     test -e mdtest-source.tgz || curl -o mdtest-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Mar29/mdtest-1.8.4.tar

     echo "Unpack the code"
     mkdir mdtest && tar -xvf mdtest-source.tgz -C mdtest --strip-components 1
 
     echo "Install the modified sources"
     cd mdtest
     cp -f ../../src/mdtest/* ./

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./mdtest --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes
 #+END_SRC

** Running issues :  
*** [[http://mantevo.org/downloads/miniSMAC2D_2.0.html][miniSMAC2D]]
**** Brief description : 
The code is incompressible Navier-Stokes flow solver.
**** Build and run  
The localization of input file should be changed.
The code run but at some level it kills the simulation before reaching mpi_finalize.
#+BEGIN_SRC shell
  echo "Clean up the place" 
  sh -xe
  rm -rf Benchmarks/miniSMAC2D
  mkdir -p Benchmarks/miniSMAC2D
  cd Benchmarks
  echo "Download the source code and data on need"
  test -e miniSMAC2D-source.tgz || curl -o miniSMAC2D-source.tgz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/MiniSMAC2D/miniSMAC2D-2.0.tgz
  test -r miniSMAC2D-data-7k.tgz || curl -o miniSMAC2D-data-7k.tgz -Lk http://mantevo.org/downloads/Test_case_7kx7k.tar.gz
  
  echo "Unpack everything"
  cd miniSMAC2D
  tar -xvf ../miniSMAC2D-source.tgz
  cd miniSMAC2D-2.0
  mkdir data
  cd data 
  tar -xvf ../../../miniSMAC2D-data-7k.tgz
  cd ../..

  echo "Install the modified sources"
  cp ../../src/miniSMAC2D-2.0/* miniSMAC2D-2.0

  echo "Compile it"
  cd miniSMAC2D-2.0/
  make 

  echo "Run it"
  set +e # back to non-paranoid mode
#+END_SRC

#+RESULTS:

*** [[https://asc.llnl.gov/CORAL-benchmarks/Summaries/AMG2013_Summary_v2.3.pdf][AMG2013]]
**** Brief description : 
AMG is a parallel algebraic multigrid solver for linear systems arising from problems on unstructured grids.
**** Build and run  
   The code has a deadlock or maybe it's not perfectly clean.
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/mdtest
     cd Benchmarks
     echo "Download the source code"
     test -e amg2013-source.tgz || curl -o amg2013-source.tgz -Lk https://asc.llnl.gov/CORAL-benchmarks/Throughput/amg20130624.tgz

     echo "Unpack the code"
     mkdir AMG2013 && tar -xvf amg2013-source.tgz -C AMG2013 --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../src/AMG2013/*.txt ../src/AMG2013/*.xml AMG2013/test/
     cp -f ../src/AMG2013/*.include AMG2013/
     cd AMG2013/

     echo "Compile it"
     make
     cd test/

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./amg2013 -pooldist 1 -r 12 12 12
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/psnap/][psnap]]
**** Brief description : 
PSNAP (PAL System Noise Activity Program) consists of a spin loop that is calibrated to take a given amount of time (typically 1 ms). This loop is repeated for a number of iterations.
**** Build and run  
Deadlock (Runing no stop).
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/mdtest
     cd Benchmarks
     echo "Download the source code"
     test -e psnap-source.tgz || curl -o psnap-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/June28/psnap-1.2June28.tar

     echo "Unpack the code"
     mkdir psnap && tar -xvf psnap-source.tgz -C psnap --strip-components 1
 
     echo "Install the modified sources"
     cd psnap
     cp -f ../../src/psnap/* ./

     echo "Compile it"
     make

     echo "Run it"
    #  smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./psnap
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/smb/][SMB]]
**** Brief description : 
It include two benchmarks :  
- The msg_rate test measures the sustained MPI message rate using a communication pattern found in many real applications.
- The mpi_overhead test uses a post-work-wait method using MPI non-blocking send and receive calls to measure the user level overhead of the respective MPI calls.
**** Build and run  
- mpi_overhead : 
hostfile note found if one use ./run_script.
Or Very slow (Runing no stop) if one use the standart runing command. 
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/smb
     mkdir -p Benchmarks
     cd Benchmarks
     echo "Download the source code"
     test -e smb-source.tgz || curl -o smb-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/smb1.0-1.tar

     echo "Unpack the code"
     mkdir smb && tar -xvf smb-source.tgz -C smb --strip-components 1

     echo "Install the modified sources"
     cp -f ../src/smb/mpi_overhead/* smb/src/mpi_overhead/
     cd smb/src/mpi_overhead/

     echo "Compile it"
     make

     echo "Run it"
     ./run_script 
#+END_SRC

- msg_rate :
Building issue.
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/smb
     mkdir -p Benchmarks
     cd Benchmarks
     echo "Download the source code"
     test -e smb-source.tgz || curl -o smb-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/smb1.0-1.tar

     echo "Unpack the code"
     mkdir smb && tar -xvf smb-source.tgz -C smb --strip-components 1

     echo "Install the modified sources"
     cp -f ../src/smb/msgrate/* smb/src/msgrate/
     cd smb/src/msgrate/
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/ziatest/][ziatest]]
**** Brief description : 
It executes a new proposed standard benchmark method for MPI startup that is intended to provide a realistic assessment of
both launch and wireup requirements. Accordingly, it exercises both the launch system of the environment and the interconnect subsystem in a specified pattern.
**** Build and run : 
To run the code one has to give 3 args as inputs.
It's required by MPI-2, this is currently not supported by SMPI.
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/ziatest
     mkdir -p Benchmarks/ziatest
     cd Benchmarks
     echo "Download the source code"
     test -e ziatest-source.tgz || curl -o ziatest-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/ziatest.tar

     echo "Unpack the code"
     cd ziatest
     tar -xvf ../ziatest-source.tgz

     echo "Install the modified sources"
     cp -f ../../src/ziatest/* ./

     echo "Compile it"
     make 

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./ziaprobe 4 4 2
 #+END_SRC

*** MiniXcye
**** Brief description 
This code is a simple linear circuit simulator with a basic parser that performs transient analysis. 
**** Build and run  
Runing issue.
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     rm -rf Benchmarks/miniXyce
     mkdir -p Benchmarks/
     cd Benchmarks
     echo "Download the source code"
     test -e miniXyce-source.tar.gz || curl -o miniXyce-source.tar.gz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/MiniXyce/miniXyce_1.0.tar.gz
          
     echo "Unpack the code"
     mkdir miniXyce && tar -xvf miniXyce-source.tar.gz -C miniXyce --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../src/miniXyce/* miniXyce/miniXyce_ref/
     cd miniXyce/miniXyce_ref/

     echo "Compile it"
     make
     make

     echo "Run it"
     smpirun -np 3 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./miniXyce.x --circuit tests/cir1.net --t_start 1e-6 --pf params.txt
 #+END_SRC

** Building issues :
*** [[https://asc.llnl.gov/CORAL-benchmarks/Summaries/HACC_IO_Summary_v1.0.pdf][HACC_IO]]
**** Brief description : 
The HACC I/O benchmark capture the I/O patterns of the HACC simulation code.
**** Build and run  
   Building issue due to using smpicxx instead of mpicxx
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     mkdir Benchmarks
     cd Benchmarks
     wget "https://asc.llnl.gov/CORAL-benchmarks/Skeleton/HACC_IO.tar.gz"
     tar -xvf *.gz 
     rm -rf *.gz
     cp -f ../src/HACC_IO/* HACC_IO_KERNEL/
     cd HACC_IO_KERNEL/

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./HACC_IO 
#+END_SRC

*** [[https://asc.llnl.gov/CORAL-benchmarks/Summaries/KMI_Summary_v1.1.pdf][KMI_HASH]]
**** Brief description : 
KMI_HASH evaluate the performance of the architecture integer operations, specifically for hashing, and for memory-intensive genomics applications. 
**** Build and run  
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     mkdir Benchmarks
     cd Benchmarks
     wget "https://asc.llnl.gov/CORAL-benchmarks/Datacentric/KMI_HASH_CORAL.tar.gz"
     tar -xvf *.gz 
     rm -rf *.gz
     cp -f ../src/kmi_hash/src/* kmi_hash/src/
     cp -f ../src/kmi_hash/tests/* kmi_hash/tests/
     cd kmi_hash/src/

     echo "Compile it"
     make
     cd ../tests/
     make

     echo "Run it"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./kmi_hash 
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/mpimemu/][mpimemu]]
**** Brief description : 
The code is a simple tool that helps approximate MPI library memory usage as a function of scale.  It takes samples of /proc/meminfo (node level)
 and /proc/self/status (process level) and outputs the min, max and avg values for a specified period of time.
**** Build and run  
Smpi building issue.
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     mkdir Benchmarks
     cd Benchmarks
     wget "http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/July5/mpimemu-1.0-rc6July5.tar"
     tar -xvf *.tar 
     rm -rf *.tar
     cp -f ../src/mpimemu/configure mpimemu-1.0-rc6July5/
     cp -f ../src/mpimemu/*.txt ../src/mpimemu/*.xml mpimemu-1.0-rc6July5/src/
     cd mpimemu-1.0-rc6July5/
     ./configure

     echo "Compile it"
     make 
     cd src/

     echo "Run it"
     mpirun -np 4 ./mpimemu
 #+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/omb-mpi-tests/][OMB_MPI]]
**** Brief description : 
The Ohio MicroBenchmark suite is a collection of independent MPI message passing performance microbenchmarks developed and written at The Ohio State University.
  It includes traditional benchmarks and performance measures such as latency, bandwidth and host overhead and can be used for both traditional and GPU-enhanced nodes.
**** Build and run  
SMPI building issue.
#+BEGIN_SRC sh
     echo "Clean up the place" 
     sh -xe
     mkdir Benchmarks
     cd Benchmarks
     wget "http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/July12/osu-micro-benchmarks-3.8-July12.tar"
     tar -xvf *.tar 
     rm -rf *.tar
     cp -f ../src/OMB_MPI/configure osu-micro-benchmarks-3.8-July12/
     cp -f ../src/OMB_MPI/* osu-micro-benchmarks-3.8-July12/mpi/pt2pt
     cd osu-micro-benchmarks-3.8-July12/
     ./configure
 #+END_SRC



* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:

