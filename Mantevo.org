*** CloverLeaf
**** Brief description 
CloverLeaf is a mini-app that solves the compressible Euler equations on a Cartesian grid.
**** Build and run
#+BEGIN_SRC sh :tangle bin/Mantevo_CloverLeaf.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Mantevo/CloverLeaf
     mkdir -p Benchmarks/Mantevo/
     cd Benchmarks/Mantevo
     echo "Download the source code"
     test -e CloverLeaf-source.tar.gz || curl -o CloverLeaf-source.tar.gz -Lk https://mantevo.org/downloads/releaseTarballs/miniapps/CloverLeaf/CloverLeaf-1.1.tar.gz
          
     echo "Unpack the code"
     mkdir CloverLeaf && tar -xvf CloverLeaf-source.tar.gz -C CloverLeaf --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../../src/Mantevo/CloverLeaf/* CloverLeaf/CloverLeaf_MPI/
     cp -f ../../src/common/* CloverLeaf/CloverLeaf_MPI/
     cd CloverLeaf/CloverLeaf_MPI/

     echo "Compile it"
     make COMPILER=GNU

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./clover_leaf
 #+END_SRC

*** MiniXyce
**** Brief description 
This code is a simple linear circuit simulator with a basic parser that performs transient analysis. 
**** Build and run  
Running issue.
#+BEGIN_SRC sh :tangle bin/Mantevo_MiniXyce.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Mantevo/miniXyce
     mkdir -p Benchmarks/Mantevo/
     cd Benchmarks/Mantevo/
     echo "Download the source code"
     test -e miniXyce-source.tar.gz || curl -o miniXyce-source.tar.gz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/MiniXyce/miniXyce_1.0.tar.gz
          
     echo "Unpack the code"
     mkdir miniXyce && tar -xvf miniXyce-source.tar.gz -C miniXyce --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../../src/Mantevo/miniXyce/* miniXyce/miniXyce_ref/
     cp -f ../../src/common/* miniXyce/miniXyce_ref/
     cd miniXyce/miniXyce_ref/

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 3 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./miniXyce.x --circuit tests/cir1.net --t_start 1e-6 --pf params.txt
 #+END_SRC

*** HPCCG
**** Brief description 
HPCCG is a simple conjugate gradient benchmark code for a 3D chimney domain on an arbitrary number of processors.
**** Build and run  
#+BEGIN_SRC sh :tangle bin/Mantevo_HPCCG.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Mantevo/HPCCG
     mkdir -p Benchmarks/Mantevo/
     cd Benchmarks/Mantevo/
     echo "Download the source code"
     test -e HPCCG-source.tgz || curl -o HPCCG-source.tgz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/HPCCG/HPCCG-1.0.tar.gz

     echo "Unpack the code"
     mkdir HPCCG && tar -xvf HPCCG-source.tgz -C HPCCG --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../../src/Mantevo/HPCCG/* HPCCG/
     cp -f ../../src/common/* HPCCG/
     cd HPCCG/

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./test_HPCCG 3 5 2
 #+END_SRC

*** MiniAMR
**** Brief description 
HPCCG is a simple conjugate gradient benchmark code for a 3D chimney domain on an arbitrary number of processors.
**** Build and run  
#+BEGIN_SRC sh :tangle bin/Mantevo_MiniAMR.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Mantevo/MiniAMR
     mkdir -p Benchmarks/Mantevo/
     cd Benchmarks/Mantevo/
     echo "Download the source code"
     test -e MiniAMR-source.tgz || curl -o MiniAMR-source.tgz -Lk https://mantevo.org/downloads/releaseTarballs/miniapps/MiniAMR/miniAMR_1.0_ref.tgz

     echo "Unpack the code"
     tar -xvf MiniAMR-source.tgz && mv miniAMR_ref MiniAMR
 
     echo "Install the modified sources"
     cp -f ../../src/Mantevo/MiniAMR/* MiniAMR/
     cp -f ../../src/common/* MiniAMR/
     cd MiniAMR/

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 16 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./miniAMR.x --num_refine 4 --max_blocks 4000 --init_x 1 --init_y 1 --init_z 1 --npx 4 --npy 2 --npz 2 --nx 8 --ny 8 --nz 8 --num_objects 2 --object 2 0 -1.10 -1.10 -1.10 0.030 0.030 0.030 1.5 1.5 1.5 0.0 0.0 0.0 --object 2 0 0.5 0.5 1.76 0.0 0.0 -0.025 0.75 0.75 0.75 0.0 0.0 0.0 --num_tsteps 100 --checksum_freq 4 --stages_per_ts 16
 #+END_SRC

*** [[http://mantevo.org/downloads/miniSMAC2D_2.0.html][MiniSMAC2D]]
**** Brief description 
The code is incompressible Navier-Stokes flow solver.
**** Build and run  
The localization of input file should be changed.
The code run but at some level it kills the simulation before reaching mpi_finalize.
#+BEGIN_SRC shell :tangle bin/Mantevo_MiniSMAC2D.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

  echo "Clean up the place" 
  set -xe
  rm -rf Benchmarks/Mantevo/miniSMAC2D
  mkdir -p Benchmarks/Mantevo/miniSMAC2D
  cd Benchmarks/Mantevo/
  echo "Download the source code and data on need"
  test -e miniSMAC2D-source.tgz || curl -o miniSMAC2D-source.tgz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/MiniSMAC2D/miniSMAC2D-2.0.tgz
  test -r miniSMAC2D-data-7k.tgz || curl -o miniSMAC2D-data-7k.tgz -Lk http://mantevo.org/downloads/Test_case_7kx7k.tar.gz
  
  echo "Unpack everything"
  tar -xvf miniSMAC2D-source.tgz -C miniSMAC2D --strip-components 1
  cd miniSMAC2D
  mkdir data
  cd data 
  tar -xvf ../../miniSMAC2D-data-7k.tgz
  cd ..

  echo "Install the modified sources"
  cp ../../../src/Mantevo/miniSMAC2D/* ./
  cp ../../../src/common/* ./

  echo "Compile it"
  make 

  echo "Run it"
  smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./smac2d_mpi_and_threads_with_AVX
  
#   set +e # back to non-paranoid mode
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/stream/][MiniEF]]
**** Brief description  
miniFE is a Finite Element mini-application which implements a couple of kernels representative of implicit finite-element applications.
**** Build and run    
#+BEGIN_SRC sh :tangle bin/Mantevo_MiniEF.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/Mantevo/MiniEF-evo
     mkdir -p Benchmarks/Mantevo/ || true
     cd Benchmarks/Mantevo/
     echo "Download the source"
     test -e MiniEF-source.tgz || curl -o MiniEF-source.tgz -Lk https://mantevo.org/downloads/releaseTarballs/miniapps/MiniFE/miniFE_ref-2.0.tgz

     echo "Unpack the code"
     tar -xvf MiniEF-source.tgz
     rm -rf miniFE-2.0_openmp_ref.tgz
     tar -xvf miniFE-2.0_ref.tgz && mv miniFE-2.0_ref  MiniEF-evo
 
     echo "Install the modified sources"
     cp -f ../../src/Mantevo/MiniEF-evo/* MiniEF-evo/src/
     cp -f ../../src/common/* MiniEF-evo/src/
     cd MiniEF-evo/src

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./miniFE.x
 #+END_SRC
 
* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:
