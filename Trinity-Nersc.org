*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/smb/][SMB]]
**** Brief description  
It include two benchmarks :  
- The msg_rate test measures the sustained MPI message rate using a communication pattern found in many real applications.
- The mpi_overhead test uses a post-work-wait method using MPI non-blocking send and receive calls to measure the user level overhead of the respective MPI calls. 
**** mpi_overhead : 
hostfile note found if one use ./run_script.
Or Very slow (Running no stop) if one use the standart runing command. 
#+BEGIN_SRC sh :tangle bin/Trinity_SMB_mpiHeader.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Trinity-Nersc/smb
     mkdir -p Benchmarks/Trinity-Nersc/
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source code"
     test -e smb-source.tgz || curl -o smb-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/smb1.0-1.tar

     echo "Unpack the code"
     mkdir smb && tar -xvf smb-source.tgz -C smb --strip-components 1

     echo "Install the modified sources"
     cp -f ../../src/Trinity-Nersc/smb/mpi_overhead/* smb/src/mpi_overhead/
     cp -f ../../src/common/* smb/src/mpi_overhead/
     cd smb/src/mpi_overhead/

     echo "Compile it"
     make

     echo "Run it"
     ./run_script 
#+END_SRC

**** Msgrate :
#+BEGIN_SRC sh :tangle bin/Trinity_SMB_msgrate.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Trinity-Nersc/smb
     mkdir -p Benchmarks/Trinity-Nersc/
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source code"
     test -e smb-source.tgz || curl -o smb-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/smb1.0-1.tar

     echo "Unpack the code"
     mkdir smb && tar -xvf smb-source.tgz -C smb --strip-components 1

     echo "Install the modified sources"
     cp -f ../../src/Trinity-Nersc/smb/msgrate/* smb/src/msgrate/
     cp -f ../../src/common/* smb/src/msgrate/
     cd smb/src/msgrate/

     echo "Compile it"
     make

     echo "Run it"
     smpirun -n 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./msgrate -n 2 -p 1 -s 8

#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/ziatest/][ZiaTest]]
**** Brief description 
It executes a new proposed standard benchmark method for MPI startup that is intended to provide a realistic assessment of
both launch and wireup requirements. Accordingly, it exercises both the launch system of the environment and the interconnect subsystem in a specified pattern.
**** Build and run 
#+BEGIN_SRC sh :tangle bin/Trinity_ZiaTest.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Trinity-Nersc/ziatest
     mkdir -p Benchmarks/Trinity-Nersc/ziatest
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source code"
     test -e ziatest-source.tgz || curl -o ziatest-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/ziatest.tar

     echo "Unpack the code"
     cd ziatest
     tar -xvf ../ziatest-source.tgz

     echo "Install the modified sources"
     cp -f ../../../src/Trinity-Nersc/ziatest/* ./
     cp -f ../../../src/common/* ./

     echo "Compile it"
     make 

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./ziaprobe 4 4 2 
 #+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/mdtest/][MDTest]]
**** Brief description 
mdtest is a program that measures performance of various metadata operations. It uses MPI to coordinate the operations and to collect the results.   
The code is composed of one C file, mdtest.c. 
**** Build and run    
The execution should done with 2 proc.
#+BEGIN_SRC sh :tangle bin/Trinity_MDTest.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/Trinity-Nersc/mdtest
     mkdir Benchmarks/Trinity-Nersc/ || true
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source"
     test -e mdtest-source.tgz || curl -o mdtest-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Mar29/mdtest-1.8.4.tar

     echo "Unpack the code"
     mkdir mdtest && tar -xvf mdtest-source.tgz -C mdtest --strip-components 1
 
     echo "Install the modified sources"
     cd mdtest
     cp -f ../../../src/Trinity-Nersc/mdtest/* ./
     cp -f ../../../src/common/* ./

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./mdtest --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes
 #+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/stream/][Stream]]
**** Brief description 
STREAM is a simple, synthetic benchmark designed to measure sustainable memory bandwidth (in MB/s) and a corresponding computation rate for four simple vector kernels.
**** Build and run 
#+BEGIN_SRC sh :tangle bin/Trinity_stream.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/Trinity-Nersc/stream
     mkdir -p Benchmarks/Trinity-Nersc/stream || true
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source"
     test -e stream-source.tgz || curl -o stream-source.tgz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Jan9/stream.tar

     echo "Unpack the code"
     tar -xvf stream-source.tgz -C stream
 
     echo "Install the modified sources"
     pwd
     cp -f ../../src/Trinity-Nersc/stream/* stream/
     cp -f ../../src/common/* stream/
     cd stream

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./stream_c.exe
 #+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/mpimemu/][MPIMemu]]
**** Brief description  
The code is a simple tool that helps approximate MPI library memory usage as a function of scale.  It takes samples of /proc/meminfo (node level)
 and /proc/self/status (process level) and outputs the min, max and avg values for a specified period of time.
**** Build and run
#+BEGIN_SRC sh sh :tangle bin/Trinity_MPIMemu.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     export MPIMEMU_START_INDEX=1
     export MPIMEMU_NUMPE_FUN="X + 1"
     export MPIMEMU_MAX_PES=4
     
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Trinity-Nersc/mpimemu
     mkdir -p Benchmarks/Trinity-Nersc/
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source code"
     test -e mpimemu-source.tar.gz || curl -o mpimemu-source.tar.gz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/July5/mpimemu-1.0-rc6July5.tar

     echo "Unpack the code"
     mkdir mpimemu && tar -xvf mpimemu-source.tar.gz -C mpimemu --strip-components 1

     echo "Configure it"
     cd mpimemu/
     ./configure CC=mpicc 

     echo "Install the modified sources"
     cp -f ../../../src/common/* src/
     cd src/
     sed -i -e "s/\mpicc/\smpicc/g" Makefile

     echo "Compile it"
     make 

     echo "Run it"
     
 #+END_SRC
 
*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/omb-mpi-tests/][OMB_MPI]]
**** Brief description 
The Ohio MicroBenchmark suite is a collection of independent MPI message passing performance microbenchmarks developed and written at The Ohio State University.
It includes traditional benchmarks and performance measures such as latency, bandwidth and host overhead and can be used for both traditional and GPU-enhanced nodes.
**** Pt2pt
#+BEGIN_SRC sh  sh :tangle bin/Trinity_OMB_MPI_pt2pt.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
  
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Trinity-Nersc/OMB_MPI
     mkdir -p Benchmarks/Trinity-Nersc/
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source code"
     test -e OMB_MPI-source.tar.gz || curl -o OMB_MPI-source.tar.gz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/July12/osu-micro-benchmarks-3.8-July12.tar

     echo "Unpack the code"
     mkdir OMB_MPI && tar -xvf OMB_MPI-source.tar.gz -C OMB_MPI --strip-components 1

     cd OMB_MPI/
     
     echo "Configure it"
     SMPI_PRETEND_CC=1 ./configure CC=smpicc

     echo "Install the modified sources"
     cp -f ../../../src/common/* ./mpi/pt2pt
     cd mpi/pt2pt
     sed -i -e "s/\mpicc/\smpicc/g" Makefile

     echo "Compile it"
     make 

     echo "Run osu_bibw"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_bibw
     
     echo "Run osu_bw"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_bw
     
     echo "Run osu_mbw_mr"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_mbw_mr
     
     echo "Run osu_multi_lat"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_multi_lat
    
     echo "Run osu_latency"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_latency
 #+END_SRC

 #+RESULTS:

**** One-sided
#+BEGIN_SRC sh  sh :tangle bin/Trinity_OMB_MPI_one-sided.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -xeu 
     rm -rf Benchmarks/Trinity-Nersc/OMB_MPI
     mkdir -p Benchmarks/Trinity-Nersc/
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source code"
     test -e OMB_MPI-source.tar.gz || curl -o OMB_MPI-source.tar.gz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/July12/osu-micro-benchmarks-3.8-July12.tar

     echo "Unpack the code"
     mkdir OMB_MPI && tar -xvf OMB_MPI-source.tar.gz -C OMB_MPI --strip-components 1

     cd OMB_MPI/

     echo "Configure it"
     SMPI_PRETEND_CC=1 ./configure

     echo "Install the modified sources"
     cp -f ../../../src/common/* ./mpi/one-sided
     cd mpi/one-sided
     sed -i -e "s/\mpicc/\smpicc/g" Makefile

     echo "Compile it"
     make 

      echo "Run osu_acc_latency"
      smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_acc_latency
     
      echo "Run osu_get_latency"
      smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_get_latency
     
      echo "Run osu_passive_acc_latency"
      smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_passive_acc_latency
    
      echo "Run osu_passive_get_bw"
      smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_passive_get_bw

      echo "Run osu_passive_put_bw"
      smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_passive_put_bw

      echo "Run osu_passive_put_latency"
      smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_passive_put_latency

      echo "Run osu_put_bibw"
      smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_put_bibw

      echo "Run osu_get_bw"
      smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_get_bw

      echo "Run osu_put_bw"
      smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_put_bw

      echo "Run osu_put_latency"
      smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 --cfg=smpi/privatization:yes ./osu_put_latency

 #+END_SRC

**** Collective
#+BEGIN_SRC sh  sh :tangle bin/Trinity_OMB_MPI_collective.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Trinity-Nersc/OMB_MPI
     mkdir -p Benchmarks/Trinity-Nersc/
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source code"
     test -e OMB_MPI-source.tar.gz || curl -o OMB_MPI-source.tar.gz -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/July12/osu-micro-benchmarks-3.8-July12.tar

     echo "Unpack the code"
     mkdir OMB_MPI && tar -xvf OMB_MPI-source.tar.gz -C OMB_MPI --strip-components 1

     cd OMB_MPI/

     echo "Configure it"
     SMPI_PRETEND_CC=1 ./configure

     echo "Install the modified sources"
     cp -f ../../../src/common/* ./mpi/collective
     cd mpi/collective
     sed -i -e "s/\mpicc/\smpicc/g" Makefile

     echo "Compile it"
     make 

     echo "Run osu_allgather"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_allgather

     echo "Run osu_allgatherv"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_allgatherv

     echo "Run osu_allreduce"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_allreduce

     echo "Run osu_alltoall"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_alltoall

     echo "Run osu_barrier"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_barrier

     echo "Run osu_bcast"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_bcast

     echo "Run osu_gather"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_gather

     echo "Run osu_gatherv"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_gatherv

     echo "Run osu_reduce"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_reduce

     echo "Run osu_reduce_scatter"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_reduce_scatter 

     echo "Run osu_scatter"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_scatter 

     echo "Run osu_scatter"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./osu_scatterv

 #+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/gtc/][GTC]]
**** Brief description  
GTC is used for Gyrokinetic Particle Simulation of Turbulent Transport in Burning Plasmas.
**** Build and run  
#+BEGIN_SRC sh  sh :tangle bin/Trinity_GTC.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Trinity-Nersc/GTC
     mkdir -p Benchmarks/Trinity-Nersc/
     cd Benchmarks/Trinity-Nersc

     echo "Download the source code"
     test -e GTC-source.tar || curl -o GTC-source.tar -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/May31/TrN8GTCMay30.tar

     echo "Unpack the code"
     mkdir GTC && tar -xvf GTC-source.tar -C GTC --strip-components 1

     echo "Install the modified sources"
     cp ../../src/Trinity-Nersc/GTC/* GTC/source/
     cp -f ../../src/common/* GTC/run/

     echo "Compile it"
     cd GTC/source/
     make 
     cd ../run/

     echo "Run it"
     smpirun -np 64 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ../source/gtcmpi gtc.input.64p
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/minife/][MiniFE]]
**** Brief description  
FE is a Finite Element mini-application which implements a couple of kernels representative of implicit finite-element applications. 
It assembles a sparse linear-system from the steady-state conduction equation on a brick-shaped problem domain of linear 8-node hex elements.
**** Build and run  
#+BEGIN_SRC sh  sh :tangle bin/Trinity_MiniFE.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Trinity-Nersc/MiniFE
     mkdir -p Benchmarks/Trinity-Nersc/
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source code"
     test -e MiniFE-source.tar || curl -o MiniFE-source.tar -Lk http://www.nersc.gov/assets/Trinity--NERSC-8-RFP/Benchmarks/Feb22/MiniFE_ref_1.4b.tar
          
     echo "Unpack the code"
     mkdir MiniFE && tar -xvf MiniFE-source.tar -C MiniFE --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../../src/Trinity-Nersc/MiniFE/* MiniFE/
     cp -f ../../src/common/* MiniFE/
     cd MiniFE/

     echo "Compile it"
     make

     echo "Run it"
#+END_SRC

*** [[http://www.nersc.gov/users/computational-systems/cori/nersc-8-procurement/trinity-nersc-8-rfp/nersc-8-trinity-benchmarks/minidft/][MiniDFT]]
**** Brief description  
FE is a Finite Element mini-application which implements a couple of kernels representative of implicit finite-element applications. 
It assembles a sparse linear-system from the steady-state conduction equation on a brick-shaped problem domain of linear 8-node hex elements.
**** Build and run  
#+BEGIN_SRC sh  sh :tangle bin/Trinity_MiniDFT.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Trinity-Nersc/MiniDFT
     mkdir -p Benchmarks/Trinity-Nersc/
     cd Benchmarks/Trinity-Nersc/
     echo "Download the source code"
     test -e MiniDFT-source.tar || curl -o MiniDFT-source.tar -Lk http://qe-forge.org/gf/download/frsrelease/144/456/MiniDFT-1.06.tar.gz
          
     echo "Unpack the code"
     mkdir MiniDFT && tar -xvf MiniDFT-source.tar -C MiniDFT --strip-components 1
 
     echo "Install the modified sources"
     cp -f ../../src/Trinity-Nersc/MiniDFT/*  ./MiniDFT/src
     cp -f ../../src/common/* MiniDFT/test

     echo "Compile it"
     cd MiniDFT/src/
     ln -s Makefile.hopper.gnu Makefile
     make
     cd ../test/
 
     echo "Run it"
     mpirun -np 8 ./mini_dft -in Si_333.in > Si_333.out
#+END_SRC

* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:
