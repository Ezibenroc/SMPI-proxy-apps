* Preparing source code 
#+BEGIN_SRC sh :tangle bin/CodeVault_PreExec.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ 
     cd Benchmarks
     echo "Checkout or update the git containing the source code"
     if [ -e CodeVault ] ; then
        cd CodeVault ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://repository.prace-ri.eu/git/PRACE/CodeVault.git
     fi

 #+END_SRC
 
* Apps
** Monte-carlo  
#+BEGIN_SRC sh :tangle bin/CodeVault_MCM.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     set -exu

     echo "Install the modified sources"
     echo "Patch the main CMakelists"
     cd Benchmarks/CodeVault/hpc_kernel_samples/monte_carlo_methods
     patch -p1 < ../../../../src/CodeVault/monte_carlo_methods/patch_mcm.diff
     
     echo "Patch integral_basic"
     cd integral_basic/
     patch -p1 < ../../../../../src/CodeVault/monte_carlo_methods/patch_integralBasic.diff

     echo "Patch pi"
     cd ../pi/
     patch -p1 < ../../../../../src/CodeVault/monte_carlo_methods/patch_pi.diff
     
     echo "Patch prng"
     cd ../prng/
     patch -p1 < ../../../../../src/CodeVault/monte_carlo_methods/patch_prng.diff
     
     cd ..

     echo "Compile them"
     mkdir -p build
     cd build/
     cmake ..
     make 

     cp ../../../../../src/common/* ./

     echo "Run them all"
     echo "Integral-basic tests"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./integral_basic/7_montecarlo_integral1d_mpi 100 
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./integral_basic/7_montecarlo_integral1d_serial 100
     
     echo "Pi tests"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./pi/7_montecarlo_pi_mpi 10 100 

     echo "Prng tests"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./prng/7_montecarlo_prng_mpi 10 100 --cfg=smpi/host-speed:10

 #+END_SRC

** N-Body methods 
*** Dynamic sparse data exchange
#+BEGIN_SRC sh :tangle bin/CodeVault_DynSparse.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     set -exu

     echo "Install the modified sources"
     cd Benchmarks/CodeVault/hpc_kernel_samples/n-body_methods/dynamic_sparse_data_exchange/
     patch -p1 < ../../../../../src/CodeVault/n-body_methods/patch_dynSparse.diff

     echo "Compile it"
     mkdir -p build
     cd build/
     cmake ..
     make 
     
     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./4_nbody_dsde 

 #+END_SRC

** Parallel_IO
**** Brief description  
This code demonstrate the basic usage of MPI parallel I/O.
**** Build and run  
#+BEGIN_SRC sh :tangle bin/CodeVault_parallelio.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     set -exu

     cd Benchmarks/CodeVault/hpc_kernel_samples/parallel_io/basicMPIIO/
     echo "Install the modified sources"
     patch -p1 < ../../../../../src/CodeVault/parallel_io/patch_basicMPIIO.diff

     echo "Compile it"
     if [ -e build ] ; then
       rm -rf build
     fi
     mkdir build
     cd build
     cmake ..
     make 
     
     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./8_io_basic_mpi_io
#+END_SRC

* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:
