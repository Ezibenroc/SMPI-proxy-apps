* Preparing source code 
#+BEGIN_SRC sh :tangle bin/CodeVault_PreExec.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ 
     cd Benchmarks
     echo "Checkout or update the git containing the source code"
     if [ -e CodeVault ] ; then
        cd CodeVault ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://repository.prace-ri.eu/git/PRACE/CodeVault.git
     fi
    #  echo "Install the modified sources"
    #  for file in `find ../src/CodeVault/ -type f` ; do 
    #      dst=`echo $file|sed 's|../src/||'`
    #      mkdir -p `dirname $dst`
    #      cp -v $file $dst 
    #  done

 #+END_SRC
 
* Apps
** Monte-carlo
*** Brief description  
*** Extra dependencies
libgmp-dev
*** Integral-basic
#+BEGIN_SRC sh :tangle bin/CodeVault_IntegralBasic.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     set -exu
     
     echo "Install the modified sources"
     cp src/CodeVault/monte_carlo_methods/integral_basic/* Benchmarks/CodeVault/hpc_kernel_samples/monte_carlo_methods/integral_basic/

     echo "Compile it"
     cd Benchmarks/CodeVault/hpc_kernel_samples/monte_carlo_methods/integral_basic/
     mkdir -p build
     cd build/
     cmake ..
     make 
     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./7_montecarlo_integral1d_mpi 100 
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./7_montecarlo_integral1d_serial 100

 #+END_SRC

*** Pi
#+BEGIN_SRC sh :tangle bin/CodeVault_Pi.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     set -exu

     echo "Install the modified sources"
     cp src/CodeVault/monte_carlo_methods/pi/* Benchmarks/CodeVault/hpc_kernel_samples/monte_carlo_methods/pi/

     echo "Compile it"
     cd Benchmarks/CodeVault/hpc_kernel_samples/monte_carlo_methods/pi 
     mkdir -p build
     cd build/
     cmake ..
     make 

     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./7_montecarlo_pi_mpi 10 100 

 #+END_SRC

*** Prng
#+BEGIN_SRC sh :tangle bin/CodeVault_Prng.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     set -exu

     echo "Install the modified sources"
     cp src/CodeVault/monte_carlo_methods/prng/* Benchmarks/CodeVault/hpc_kernel_samples/monte_carlo_methods/prng/

     echo "Compile it"
     cd Benchmarks/CodeVault/hpc_kernel_samples/monte_carlo_methods/prng 
     mkdir -p build
     cd build/
     cmake ..
     make 

     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./7_montecarlo_prng_mpi 10 100 --cfg=smpi/host-speed:10

 #+END_SRC
 
** N-Body methods
*** Brief description 
*** Dynamic sparse data exchange
#+BEGIN_SRC sh :tangle bin/CodeVault_DynSparse.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     set -exu

     echo "Install the modified sources"
     cp src/CodeVault/n-body_methods/dynamic_sparse_data_exchange/* Benchmarks/CodeVault/hpc_kernel_samples/n-body_methods/dynamic_sparse_data_exchange/

     echo "Compile it"
     cd Benchmarks/CodeVault/hpc_kernel_samples/n-body_methods/dynamic_sparse_data_exchange/
     mkdir -p build
     cd build/
     cmake ..
     make 
     
     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./4_nbody_dsde 

 #+END_SRC
 
** Unstructured_grids
*** Brief description 
This code sample demonstrates how to implement halo-exchange for structured or unstructured grids using advanced MPI features
*** Halo exchange
#+BEGIN_SRC sh :tangle bin/CodeVault_HaloExchange.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     set -exu

     echo "Install the modified sources"
     cp src/CodeVault/Unstructred_grids/halo_exchange/* Benchmarks/CodeVault/hpc_kernel_samples/unstructured_grids/halo_exchange/

     echo "Compile it"
     cd Benchmarks/CodeVault/hpc_kernel_samples/unstructured_grids/halo_exchange/
     mkdir -p build
     cd build/
     cmake ..
     make 
     
     cp ../../../../../../src/common/* ./

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./8_unstructured_haloex

 #+END_SRC

** Parallel_IO
**** Brief description  
This code demonstrate the basic usage of MPI parallel I/O.
**** Build and run  
#+BEGIN_SRC sh :tangle bin/CodeVault_parallelio.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     set -exu

     echo "Install the modified sources"
     cp -r src/CodeVault/parallel_io/* Benchmarks/CodeVault/hpc_kernel_samples/parallel_io/

     echo "Compile it"
     cd Benchmarks/CodeVault/hpc_kernel_samples/parallel_io/
     mkdir -p build
     cd build/
     #cmake ..
     #make 

     echo "Run it"
#+END_SRC

* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:
