* Apps
** CoMD
*** Brief description 
CoMD is a reference implementation of typical classical molecular dynamics algorithms and workloads.
*** Build and run  
#+BEGIN_SRC sh :tangle bin/ECP_CoMD.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e CoMD ] ; then
        cd CoMD ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/ECP-copa/CoMD.git
     fi

     echo "Install the modified sources"
     cd CoMD/src-mpi/
     patch -p1 < ../../../../src/ECP/CoMD/patch_CoMD.diff
     cp Makefile.vanilla Makefile

     echo "Compile it" 
     make 
     cd ../examples/
     cp ../../../../src/common/* ./

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ../bin/CoMD-mpi -e -i 4 -j 2 -k 1 -x 40 -y 40 -z 40
     cd ../src-mpi/
     make clean

 #+END_SRC

** AMG
*** Brief description 
AMG is a parallel algebraic multigrid solver for linear systems arising from
problems on unstructured grids.  The driver provided with AMG builds linear 
systems for various 3-dimensional problems.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_AMG.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e AMG ] ; then
        cd AMG ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/LLNL/AMG.git
     fi

     echo "Install the modified sources"
     cd AMG/
     patch -p1 < ../../../src/ECP/AMG/patch_AMG.diff

     echo "Compile it" 
     make veryclean
     make
     cp ../../../src/common/* ./test/
     cd test/

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./amg
     
     cd ..
     make veryclean

 #+END_SRC

** Sw4lite
*** Brief description 
Sw4lite is a bare bone version of SW4 (Github) intended for testing performance optimizations in a few important numerical kernels of SW4.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_sw4lite.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e sw4lite ] ; then
        cd sw4lite ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/geodynamics/sw4lite.git
     fi

     echo "Install the modified sources"
     cp -f ../../src/ECP/sw4lite/pointsource.in ./sw4lite/tests/pointsource/
     cd sw4lite
     sed -i -e "s/\mpicxx/\smpicxx/g" Makefile
     sed -i -e "s/\mpic++/\smpicxx/g" Makefile
     sed -i -e "s/\mpif90/\smpiff/g" Makefile

     echo "Compile it"
     make openmp=no
     cp ../../../src/common/* ./optimize/
     cd optimize/
     
     smpirun -np 16 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./sw4lite ../tests/pointsource/pointsource.in
     cd ..
     make clean

 #+END_SRC

** QuickSilver
*** Brief description 
Quicksilver is a proxy application that represents some elements of the Mercury workload by solving a simpliﬁed dynamic monte carlo particle transport problem.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_quicksilver.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e Quicksilver ] ; then
        cd Quicksilver ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/LLNL/Quicksilver.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./Quicksilver/src/
     cd Quicksilver/src/
     patch -p1 < ../../../../src/ECP/Quicksilver/patch_QSilver_Makefile.diff
     patch -p1 < ../../../../src/ECP/Quicksilver/patch_QSilver_initMC.diff

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./qs
     make clean

 #+END_SRC

** SimpleMOC
*** Brief description 
The purpose of this mini-app is to demonstrate the performance characterterics and viability of the Method of Characteristics (MOC)
for 3D neutron transport calculations in the context of full scale light water reactor simulation.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_SimpleMOC.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e SimpleMOC ] ; then
        cd SimpleMOC ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/ANL-CESAR/SimpleMOC.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./SimpleMOC/src/
     cd SimpleMOC/src/
     patch -p1 < ../../../../src/ECP/SimpleMOC/patch_SimpleMOC.diff
     cp ../../../../src/ECP/SimpleMOC/input.in ./

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./SimpleMOC -i input.in
     make clean

 #+END_SRC
 
** PENNANT
*** Brief description 
PENNANT is a mini-app intended for use in advanced architecture research.  It has data structures for manipulating 2-D unstructured
finite element meshes containing arbitrary polygons.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_PENNANT.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e PENNANT ] ; then
        cd PENNANT ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/lanl/PENNANT.git
     fi
     
     cd PENNANT/
     echo "Install the modified sources"
     cp ../../../src/common/* ./
     patch -p1 < ../../../src/ECP/PENNANT/patch_PennantMakefile.diff
     patch -p1 < ../../../src/ECP/PENNANT/patch_PennantMain.diff
     patch -p1 < ../../../src/ECP/PENNANT/patch_PennantParalC.diff
     patch -p1 < ../../../src/ECP/PENNANT/patch_PennantParalH.diff

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./build/pennant ./test/leblanc/leblanc.pnt
     make clean

 #+END_SRC

** SWFFT
*** Brief description 
Fast Fourier transform which distributes data between ranks in a 3D cartesian grid communicator, and then re-distributed across three 2D pencil dsitributions to compute the DFFTs along each dimension. 
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_SWFFT.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e SWFFT ] ; then
        cd SWFFT ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://xgitlab.cels.anl.gov/hacc/SWFFT.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./SWFFT/
     cd SWFFT/
     sed -i -e "s/\mpicxx/\smpicxx/g" GNUmakefile
     sed -i -e "s/\mpicc/\smpicc/g" GNUmakefile
     sed -i -e "s/\mpif90/\smpiff/g" GNUmakefile

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./build/TestDfft 2 128
     make clean

 #+END_SRC

** EBMS
*** Brief description 
This is a miniapp for the Energy Banding Monte Carlo (EBMC) neutron transportation simulation code.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_EBMS.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e EBMS ] ; then
        cd EBMS ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/ANL-CESAR/EBMS.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./EBMS/
     cd EBMS/
     sed -i -e "s/\mpicc/\smpicc/g" Makefile

     echo "Compile it"
     make ebmc-rget

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./ebmc-rget ./inputs/params.small
     make clean

 #+END_SRC

** CoSP2
*** Brief description 
CoSP2 is a reference implementation of typical linear algebra algorithms and workloads for a quantum molecular dynamics (QMD) electronic structure code.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_CoSP2.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e CoSP2 ] ; then
        cd CoSP2 ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/exmatex/CoSP2.git
     fi

     echo "Install the modified sources"
     cd CoSP2/src-mpi
     cp ../../../../src/common/* ./
     patch -p1 < ../../../../src/ECP/CoSP2/patch_CoSP2.diff

     echo "Compile it"
     smpicc *.c -o CoSP2 -lm

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./CoSP2 
     rm CoSP2

 #+END_SRC

** ExaMinMD
*** Brief description 
ExaMiniMD is a proxy application and research vehicle for particle codes, in particular Molecular Dynamics (MD). Compared to 
previous MD proxy apps (MiniMD, COMD), its design is significantly more modular in order to allow independent investigation of different aspects.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_ExaMiniMD.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e ExaMiniMD ] ; then
        cd ExaMiniMD ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/ECP-copa/ExaMiniMD.git
     fi
     
     
     if [ -e kokkos ] ; then
        cd kokkos ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/kokkos/kokkos
     fi
     cd ExaMiniMD
     
     echo "Install the modified sources"
     cp ../../../src/common/* ./src
     cd src

     echo "Compile it"
     make KOKKOS_PATH=$PWD/../../kokkos KOKKOS_ARCH=SNB KOKKOS_DEVICES=Serial CXX=smpicxx MPI=1

     echo "Run it"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./ExaMiniMD -il ../input/in.lj --comm-type MPI --kokkos-threads=12 
     make KOKKOS_PATH=$PWD/../../kokkos KOKKOS_ARCH=SNB KOKKOS_DEVICES=Serial CXX=smpicxx MPI=1 clean

 #+END_SRC

** MINITRI
*** Brief description 
This directory contains different implementations of a linear algebra based formulation of miniTri.  These implementations are supposed to be prototypes of future Graph BLAS based
implementations.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_miniTri.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e miniTri ] ; then
        cd miniTri ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/Mantevo/miniTri.git
     fi

 #+END_SRC

*** linearAlgebra
#+BEGIN_SRC sh :tangle bin/ECP_linearAlgebra.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     cd Benchmarks/ECP/miniTri/miniTri

     echo "Install the modified sources"
     cp ../../../../src/common/* ./linearAlgebra/MPI/
     cd linearAlgebra/MPI/
     sed -i -e "s/\mpicxx/\smpicxx/g" Makefile

     echo "Compile it"
     make 

     echo "get input file"
     if [ ! -e ca-GrQc ] ; then
       wget https://sparse.tamu.edu/MM/SNAP/ca-GrQc.tar.gz
       tar xzf ca-GrQc.tar.gz
       rm ca-GrQc.tar.gz
     fi
     
     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./miniTri.exe ./ca-GrQc/ca-GrQc.mtx
     make clean

 #+END_SRC

** CLAMR
*** Brief description
The CLAMR code is a cell-based adaptive mesh refinement (AMR) mini-app developed as a testbed for hybrid algorithm development using MPI and OpenCL GPU code. 
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_CLAMR.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     
     echo "Checkout or update the git containing the source code"
     if [ -e CLAMR ] ; then
        cd CLAMR ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/lanl/CLAMR.git
     fi
     
     cd CLAMR/

     echo "Install the modified sources"
     patch -p1 < ../../../src/ECP/CLAMR/patch_clamr
     
     if [ -e build ] ; then
       rm -rf build
     fi
     mkdir build
     cd build

     cp ../../../../src/common/* .

     echo "Compile it"
     SMPI_PRETEND_CC=1 cmake -DCMAKE_C_COMPILER=smpicc -DCMAKE_CXX_COMPILER=smpicxx -DCMAKE_Fortran_COMPILER=smpif90 -DMPI_C_COMPILER=smpicc -DMPI_CXX_COMPILER=smpicxx -DMPI_C_LIBRARIES=$SIMGRID_PATH/lib/libsimgrid.so -DMPI_CXX_LIBRARIES=$SIMGRID_PATH/lib/libsimgrid.so -DMPI_FORTRAN_LIBRARIES=$SIMGRID_PATH/lib/libsimgrid.so  -DMPI_C_INCLUDE_PATH=$SIMGRID_PATH/include/smpi -DMPI_CXX_INCLUDE_PATH=$SIMGRID_PATH/include/smpi -DMPI_FORTRAN_INCLUDE_PATH=$SIMGRID_PATH/include/smpi ..
     make clamr_mpionly
     
     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./clamr_mpionly -n 256 -l 2 -i 10 -t 100
     cd ..
     rm -rf build

 #+END_SRC

** Kripke
*** Brief description 
Kripke is a simple, scalable, 3D Sn deterministic particle transport code.  Its primary purpose is to research how data layout, programming paradigms and architectures effect the implementation and performance of Sn transport.  A main goal of Kripke is investigating how different data-layouts affect instruction, thread and task level parallelism, and what the implications are on overall solver performance.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_kripke.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     
     echo "Download the source code"
     test -e kripke-source.tar.gz || curl -o kripke-source.tar.gz -Lk https://codesign.llnl.gov/downloads/kripke-openmp-1.1.tar.gz

     echo "Unpack the code"
     if [ -e kripke ] ; then
       rm -rf kripke
     fi
     mkdir kripke && tar -xvf kripke-source.tar.gz -C kripke --strip-components 1
     
     cd kripke/

     echo "Install the modified sources"
     patch -p1 < ../../../src/ECP/kripke/patch_kripke.diff
     
     if [ -e build ] ; then
       rm -rf build
     fi
     mkdir build
     cd build

     cp ../../../../src/common/* .

     echo "Compile it"
     cmake ..
     make -j 8
     
     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./kripke --procs 2,2,2
     cd ..
     rm -rf build

 #+END_SRC

** MiniAero
*** Brief description 
MiniAero is a mini-application for the evaulation of programming models and hardware for next generation platforms. MiniAero is an explicit (using RK4) unstructured finite volume code that solves the compressible Navier-Stokes equations. Both inviscid and viscous terms are included. The viscous terms can be optionally included or excluded.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_miniAero.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     
     echo "Checkout or update the git containing the source code"
     if [ -e miniAero ] ; then
        cd miniAero ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/Mantevo/miniAero.git
     fi
     
     if [ -e kokkos ] ; then
        cd kokkos ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/kokkos/kokkos
     fi
     
     cd miniAero/kokkos

     echo "Install the modified sources"
     patch -p1 < ../../../../src/ECP/miniAero/patch_makefile.diff
     
     echo "Compile it"
     make KOKKOS_PATH=$PWD/../../kokkos KOKKOS_ARCH=SNB KOKKOS_DEVICES=Serial
     
     echo "Run it"
     cd tests/3D_Sod_Parallel
     cp ../../../../../../src/common/* .

     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ../../miniAero
     cd ../..
     make KOKKOS_PATH=$PWD/../../kokkos KOKKOS_ARCH=SNB KOKKOS_DEVICES=Serial clean

 #+END_SRC

** TeaLeaf
*** Brief description 
TeaLeaf is a mini-app that solves the linear heat conduction equation on a spatially decomposed regularly grid using a 5 point stencil with implicit solvers. TeaLeaf currently solves the equations in two dimensions, but three dimensional support is in beta.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_TeaLeaf.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     
     echo "Checkout or update the git containing the source code"
     if [ -e TeaLeaf_ref ] ; then
        cd TeaLeaf_ref ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/UK-MAC/TeaLeaf_ref.git
     fi
     
     cd TeaLeaf_ref/

     echo "Install the modified sources"
     patch -p1 < ../../../src/ECP/TeaLeaf/patch_tealeaf.diff
     
     cp ../../../src/common/* .

     echo "Compile it"
     make -j4
     
     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./tea_leaf
     make clean

 #+END_SRC

** FFTW
*** Brief description
FFTW is a C subroutine library for computing the discrete Fourier transform (DFT) in one or more dimensions, of arbitrary input size, and of both real and complex data (as well as of even/odd data, i.e. the discrete cosine/sine transforms or DCT/DST).
*** Build
#+BEGIN_SRC sh :tangle bin/FFTW.sh
    export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
    export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
    export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

    echo "Clean up the place"
    set -exu
    mkdir -p Benchmarks/FFTW/
    cd Benchmarks/FFTW/

    test -e fftw-3.3.7.tar.gz || wget http://www.fftw.org/fftw-3.3.7.tar.gz
    tar xzf fftw-3.3.7.tar.gz 

    cd fftw-3.3.7
    patch -p1 < ../../../src/ECP/FFTW/patch_fftw3.diff

    SMPI_PRETEND_CC=1 ./configure --enable-mpi --enable-threads MPICC=smpicc CC=smpicc LD=ld --prefix=${PWD}/../fftw3-install
    make
    make install

#+END_SRC

** VPFFT
*** Brief description 
VPFFT is an implementation of a mesoscale micromechanical materials model. By solving the viscoplasticity model, VPFFT simulates the evolution of a material under deformation. The solution time to the viscoplasticity model, described by a set of partial differential equations, is significantly reduced by the application of Fast Fourier Transform in the VPFFT algorithm.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_VPFFT.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     
     echo "Checkout or update the git containing the source code"
     if [ -e VPFFT ] ; then
        cd VPFFT ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/exmatex/VPFFT.git
     fi
     export FFTW3_PATH=${PWD}/../FFTW/fftw3-install/
     cd VPFFT/

     echo "Install the modified sources"
     cp ./CMakeBuild/CMakeLists.txt.example CMakeLists.txt
     patch -p0 < ../../../src/ECP/VPFFT/patch_vpfft.diff
   
     if [ -e build ] ; then
       rm -rf build
     fi
     mkdir build
     cd build

     cp ../../../../src/common/* .

     echo "Compile it"
     cmake ..
     make -j4
     
     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./VPFFT++
     make clean

 #+END_SRC

** SNbone
*** Brief description 
This program emulates the inversion of A in A*x=S on a single node arch, and it is broken into three steps.
1) Create an unstructured mesh.
2) Process the produced mesh by re-ordered it with respect to element and vertex such that it can be applied in n*thread independent steps.
3) Run the mini-app (fortran or c version).
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_SNbone.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     
     echo "Checkout or update the git containing the source code"
     if [ -e SNbone ] ; then
        cd SNbone ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/ANL-CESAR/SNbone.git
     fi

     echo "Install the modified sources"
     
     cd SNbone/src_makemesh
     ls
     echo "Create an unstructured mesh"
     make COMPILER=gfortran
     ./makemesh.x    10 10 10 0

     echo "Process this mesh"
     cd ../src_processmesh/
     patch -p1 < ../../../../src/ECP/SNbone/patch_procmesh.diff
     make COMPILER=gfortran 
     mv ../src_makemesh/grid_tet_mesh.ascii inputmesh.ascii
     ./processmesh.x 1  1
     rm inputmesh.ascii

     cd ..
     patch -p1 < ../../../src/ECP/SNbone/patch_SNboneff.diff
     cd src_fortran/
     
     cp ../../../../src/common/* .

     echo "Compile it"
     make USEMETIS=yes COMPILER=smpi
     mv ../src_processmesh/pmesh.ascii .

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./SNaCFE.x 0  100 30 2 2
     make clean     

 #+END_SRC

** MiniXyce
*** Brief description 
This code is a simple linear circuit simulator with a basic parser that performs transient analysis. 
*** Build and run  
#+BEGIN_SRC sh :tangle bin/ECP_MiniXyce.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/ECP/miniXyce
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Download the source code"
     test -e miniXyce-source.tar.gz || curl -o miniXyce-source.tar.gz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/MiniXyce/miniXyce_1.0.tar.gz
          
     echo "Unpack the code"
     mkdir miniXyce && tar -xvf miniXyce-source.tar.gz -C miniXyce --strip-components 1
 
     echo "Install the modified sources"
     cd miniXyce/miniXyce_ref/
     patch -p1 < ../../../../src/ECP/MiniXyce/patch_MiniXyce.diff
     cp -f ../../../../src/common/* ./

     echo "Compile it"
     ./get_common_files
     make

     echo "Run it"
     smpirun -np 3 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./miniXyce.x --circuit tests/cir1.net --t_start 1e-6 --pf params.txt
     make clean

 #+END_SRC

** HPCCG
*** Brief description 
HPCCG is a simple conjugate gradient benchmark code for a 3D chimney domain on an arbitrary number of processors.
*** Build and run  
#+BEGIN_SRC sh :tangle bin/Mantevo_HPCCG.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/ECP/HPCCG
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Download the source code"
     test -e HPCCG-source.tgz || curl -o HPCCG-source.tgz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/HPCCG/HPCCG-1.0.tar.gz

     echo "Unpack the code"
     mkdir HPCCG && tar -xvf HPCCG-source.tgz -C HPCCG --strip-components 1
 
     echo "Install the modified sources"
     cd HPCCG/
     patch -p1 < ../../../src/ECP/HPCCG/patch_HPCCG.diff
     cp -f ../../../src/common/* ./

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./test_HPCCG 3 5 2
     make clean
     
 #+END_SRC

** MiniAMR
*** Brief description 
HPCCG is a simple conjugate gradient benchmark code for a 3D chimney domain on an arbitrary number of processors.
*** Build and run  
#+BEGIN_SRC sh :tangle bin/Mantevo_MiniAMR.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/ECP/MiniAMR
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Download the source code"
     test -e MiniAMR-source.tgz || curl -o MiniAMR-source.tgz -Lk https://mantevo.org/downloads/releaseTarballs/miniapps/MiniAMR/miniAMR_1.0_ref.tgz

     echo "Unpack the code"
     tar -xvf MiniAMR-source.tgz && mv miniAMR_ref MiniAMR
 
     echo "Install the modified sources"
     cd MiniAMR/
     patch -p1 < ../../../src/ECP/MiniAMR/patch_MiniAMR.diff
     mv Makefile.mpi Makefile 
     cp -f ../../../src/common/* ./

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 16 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./miniAMR.x --init_x 1 --init_y 1 --init_z 1 --npx 4 --npy 2 --npz 2 --nx 4 --ny 4 --nz 4
     make clean

 #+END_SRC

** MiniEF
*** Brief description  
miniFE is a Finite Element mini-application which implements a couple of kernels representative of implicit finite-element applications.
*** Build and run    
#+BEGIN_SRC sh :tangle bin/Mantevo_MiniEF.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/Mantevo/MiniEF-evo
     mkdir -p Benchmarks/Mantevo/ || true
     cd Benchmarks/Mantevo/
     echo "Download the source"
     test -e MiniEF-source.tgz || curl -o MiniEF-source.tgz -Lk https://mantevo.org/downloads/releaseTarballs/miniapps/MiniFE/miniFE_ref-2.0.tgz

     echo "Unpack the code"
     tar -xvf MiniEF-source.tgz
     rm -rf miniFE-2.0_openmp_ref.tgz
     tar -xvf miniFE-2.0_ref.tgz && mv miniFE-2.0_ref  MiniEF-evo
 
     echo "Install the modified sources"
     cd MiniEF-evo/src
     patch -p1 < ../../../../src/ECP/MiniEF-evo/patch_MiniFE.diff
     cp -f ../../../../src/common/* ./

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 6 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./miniFE.x
     make clean

 #+END_SRC

** CloverLeaf
*** Brief description 
CloverLeaf is a mini-app that solves the compressible Euler equations on a Cartesian grid.
*** Build and run
#+BEGIN_SRC sh :tangle bin/Mantevo_CloverLeaf.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     echo "Clean up the place" 
     set -xeu
     rm -rf Benchmarks/Mantevo/CloverLeaf
     mkdir -p Benchmarks/Mantevo/
     cd Benchmarks/Mantevo
     echo "Download the source code"
     test -e CloverLeaf-source.tar.gz || curl -o CloverLeaf-source.tar.gz -Lk https://mantevo.org/downloads/releaseTarballs/miniapps/CloverLeaf/CloverLeaf-1.1.tar.gz
          
     echo "Unpack the code"
     mkdir CloverLeaf && tar -xvf CloverLeaf-source.tar.gz -C CloverLeaf --strip-components 1
 
     echo "Install the modified sources"
     cd CloverLeaf/CloverLeaf_MPI/
     patch -p1 < ../../../../src/ECP/CloverLeaf/patch_CloverLeaf.diff
     patch -p1 < ../../../../src/ECP/CloverLeaf/patch_CloverLeaf_initialise.diff
     cp -f ../../../../src/common/* ./

     echo "Compile it"
     make COMPILER=GNU

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml ./clover_leaf
     make clean

 #+END_SRC

** MiniSMAC2D
**** Brief description 
The code is incompressible Navier-Stokes flow solver.
**** Build and run
#+BEGIN_SRC shell :tangle bin/Mantevo_MiniSMAC2D.sh
  export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
  export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
  export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

  echo "Clean up the place" 
  set -xe
  rm -rf Benchmarks/ECP/miniSMAC2D
  mkdir -p Benchmarks/ECP/miniSMAC2D
  cd Benchmarks/ECP/
  echo "Download the source code and data on need"
  test -e miniSMAC2D-source.tgz || curl -o miniSMAC2D-source.tgz -Lk http://mantevo.org/downloads/releaseTarballs/miniapps/MiniSMAC2D/miniSMAC2D-2.0.tgz
  test -r miniSMAC2D-data-7k.tgz || curl -o miniSMAC2D-data-7k.tgz -Lk http://mantevo.org/downloads/Test_case_7kx7k.tar.gz
  
  echo "Unpack everything"
  tar -xvf miniSMAC2D-source.tgz -C miniSMAC2D --strip-components 1
  cd miniSMAC2D
  mkdir data
  cd data 
  tar -xvf ../../miniSMAC2D-data-7k.tgz
  cd ..

  echo "Install the modified sources"
  patch -p1 < ../../../src/ECP/MiniSMAC2D/patch_SMAC2D_Makefile.diff
  patch -p1 < ../../../src/ECP/MiniSMAC2D/patch_SMAC2D_intiaf.diff
  patch -p1 < ../../../src/ECP/MiniSMAC2D/patch_SMAC2Din.diff
  cp ../../../src/common/* ./

  echo "Compile it"
  make 

  echo "Run it"
  smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./smac2d_mpi_and_threads_with_AVX
  rm bcmain.dat_original_7kx7k
  rm xy.dat_original_7kx7k
  make clean

#+END_SRC

** MiniMD
*** Brief description 
miniMD is a simple, parallel molecular dynamics (MD) code.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_MiniMD.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     
     echo "Checkout or update the git containing the source code"
     if [ -e miniMD ] ; then
        cd miniMD ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/Mantevo/miniMD.git
     fi

     cd miniMD/ref/

     echo "Install the modified sources"
     patch -p1 < ../../../../src/ECP/MiniMD/patch_miniMD_Makefile.diff

     cp ../../../../src/common/* .

     echo "Compile it"
     make -f Makefile.default
     
     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./miniMD
     make clean

 #+END_SRC

* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:
