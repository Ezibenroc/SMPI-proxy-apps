* Apps
** CoMD
*** Brief description 
CoMD is a reference implementation of typical classical molecular dynamics algorithms and workloads.
*** Build and run  
#+BEGIN_SRC sh :tangle bin/ECP_CoMD.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/ECP/CoMD
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e CoMD ] ; then
        cd CoMD ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/ECP-copa/CoMD.git
     fi

     echo "Install the modified sources"
     cd CoMD/src-mpi/
     cp ../../../../src/ECP/CoMD/* ./

     echo "Compile it" 
     make 
     cd ../examples/
     cp ../../../../src/common/* ./

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ../bin/CoMD-mpi -e -i 4 -j 2 -k 1 -x 40 -y 40 -z 40

 #+END_SRC

** AMG
*** Brief description 
AMG is a parallel algebraic multigrid solver for linear systems arising from
problems on unstructured grids.  The driver provided with AMG builds linear 
systems for various 3-dimensional problems.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_AMG.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/ECP/AMG
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e AMG ] ; then
        cd AMG ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/LLNL/AMG.git
     fi

     echo "Install the modified sources"
     cp ../../src/ECP/AMG/* ./AMG/

     echo "Compile it" 
     cd AMG/
     make veryclean
     make
     cp ../../../src/common/* ./test/
     cd test/

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./amg

 #+END_SRC

** Sw4lite
*** Brief description 
Sw4lite is a bare bone version of SW4 (Github) intended for testing performance optimizations in a few important numerical kernels of SW4.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_sw4lite.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     rm -rf Benchmarks/ECP/sw4lite
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e sw4lite ] ; then
        cd sw4lite ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/geodynamics/sw4lite.git
     fi

     echo "Install the modified sources"
     cd sw4lite
     sed -i -e "s/\mpicxx/\smpicxx/g" Makefile
     sed -i -e "s/\mpic++/\smpicxx/g" Makefile
     sed -i -e "s/\mpif90/\smpif90/g" Makefile

     echo "Compile it"
     make openmp=no

 #+END_SRC

* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:
