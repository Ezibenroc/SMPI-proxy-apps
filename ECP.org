* Apps
** CoMD
*** Brief description 
CoMD is a reference implementation of typical classical molecular dynamics algorithms and workloads.
*** Build and run  
#+BEGIN_SRC sh :tangle bin/ECP_CoMD.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e CoMD ] ; then
        cd CoMD ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/ECP-copa/CoMD.git
     fi

     echo "Install the modified sources"
     cd CoMD/src-mpi/
     cp ../../../../src/ECP/CoMD/* ./

     echo "Compile it" 
     make 
     cd ../examples/
     cp ../../../../src/common/* ./

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ../bin/CoMD-mpi -e -i 4 -j 2 -k 1 -x 40 -y 40 -z 40

 #+END_SRC

** AMG
*** Brief description 
AMG is a parallel algebraic multigrid solver for linear systems arising from
problems on unstructured grids.  The driver provided with AMG builds linear 
systems for various 3-dimensional problems.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_AMG.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e AMG ] ; then
        cd AMG ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/LLNL/AMG.git
     fi

     echo "Install the modified sources"
     cp ../../src/ECP/AMG/* ./AMG/

     echo "Compile it" 
     cd AMG/
     make veryclean
     make
     cp ../../../src/common/* ./test/
     cd test/

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./amg

 #+END_SRC

** Sw4lite
*** Brief description 
Sw4lite is a bare bone version of SW4 (Github) intended for testing performance optimizations in a few important numerical kernels of SW4.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_sw4lite.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e sw4lite ] ; then
        cd sw4lite ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/geodynamics/sw4lite.git
     fi

     echo "Install the modified sources"
     cp -f ../../src/ECP/sw4lite/pointsource.in ./sw4lite/tests/pointsource/
     cd sw4lite
     sed -i -e "s/\mpicxx/\smpicxx/g" Makefile
     sed -i -e "s/\mpic++/\smpicxx/g" Makefile
     sed -i -e "s/\mpif90/\smpiff/g" Makefile

     echo "Compile it"
     make openmp=no
     cp ../../../src/common/* ./optimize/
     cd optimize/
     
     smpirun -np 16 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./sw4lite ../tests/pointsource/pointsource.in

 #+END_SRC

** QuickSilver
*** Brief description 
Quicksilver is a proxy application that represents some elements of the Mercury workload by solving a simpliÔ¨Åed dynamic monte carlo particle transport problem.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_quicksilver.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ECP/ 
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e Quicksilver ] ; then
        cd Quicksilver ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/LLNL/Quicksilver.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./Quicksilver/src/
     cp ../../src/ECP/Quicksilver/* ./Quicksilver/src/
     cd Quicksilver/src/

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./qs

 #+END_SRC

** SimpleMOC
*** Brief description 
The purpose of this mini-app is to demonstrate the performance characterterics and viability of the Method of Characteristics (MOC)
for 3D neutron transport calculations in the context of full scale light water reactor simulation.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_SimpleMOC.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place" 
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e SimpleMOC ] ; then
        cd SimpleMOC ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/ANL-CESAR/SimpleMOC.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./SimpleMOC/src/
     cp ../../src/ECP/SimpleMOC/* ./SimpleMOC/src/
     cd SimpleMOC/src/

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./SimpleMOC -i input.in

 #+END_SRC
 
** PENNANT
*** Brief description 
PENNANT is a mini-app intended for use in advanced architecture research.  It has data structures for manipulating 2-D unstructured
finite element meshes containing arbitrary polygons.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_PENNANT.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e PENNANT ] ; then
        cd PENNANT ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/lanl/PENNANT.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./PENNANT/
     cp -r ../../src/ECP/PENNANT/* ./PENNANT/
     cd PENNANT/

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./build/pennant ./test/leblanc/leblanc.pnt

 #+END_SRC

** SWFFT
*** Brief description 
Fast Fourier transform which distributes data between ranks in a 3D cartesian grid communicator, and then re-distributed across three 2D pencil dsitributions to compute the DFFTs along each dimension. 
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_SWFFT.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e SWFFT ] ; then
        cd SWFFT ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://xgitlab.cels.anl.gov/hacc/SWFFT.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./SWFFT/
     cd SWFFT/
     sed -i -e "s/\mpicxx/\smpicxx/g" GNUmakefile
     sed -i -e "s/\mpicc/\smpicc/g" GNUmakefile
     sed -i -e "s/\mpif90/\smpiff/g" GNUmakefile

     echo "Compile it"
     make

     echo "Run it"
     smpirun -np 8 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./build/TestDfft 2 128

 #+END_SRC

** EBMS
*** Brief description 
This is a miniapp for the Energy Banding Monte Carlo (EBMC) neutron transportation simulation code.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_EBMS.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e EBMS ] ; then
        cd EBMS ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/ANL-CESAR/EBMS.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./EBMS/
     cd EBMS/
     sed -i -e "s/\mpicc/\smpicc/g" Makefile

     echo "Compile it"
     make ebmc-rget

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./ebmc-rget ./inputs/params.small

 #+END_SRC

** CoSP2
*** Brief description 
CoSP2 is a reference implementation of typical linear algebra algorithms and workloads for a quantum molecular dynamics (QMD) electronic structure code.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_CoSP2.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH
     
     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e CoSP2 ] ; then
        cd CoSP2 ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/exmatex/CoSP2.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./CoSP2/src-mpi
     cp -f ../../src/ECP/CoSP2/* ./CoSP2/src-mpi
     cd CoSP2/src-mpi

     echo "Compile it"
     smpicc *.c -o CoSP2 -lm

     echo "Run it"
     smpirun -np 4 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml --cfg=smpi/host-speed:100 ./CoSP2 

 #+END_SRC

** ExaMinMD
*** Brief description 
ExaMiniMD is a proxy application and research vehicle for particle codes, in particular Molecular Dynamics (MD). Compared to 
previous MD proxy apps (MiniMD, COMD), its design is significantly more modular in order to allow independent investigation of different aspects.
*** Build and run 
#+BEGIN_SRC sh :tangle bin/ECP_ExaMiniMD.sh
     export SIMGRID_PATH="${SIMGRID_PATH:=~/simgrid}"
     export LD_LIBRARY_PATH=$SIMGRID_PATH/build/lib:$SIMGRID_PATH/lib:$LD_LIBRARY_PATH
     export PATH=$SIMGRID_PATH/build/bin:$SIMGRID_PATH/bin:$PATH

     echo "Clean up the place"
     set -exu
     mkdir -p Benchmarks/ECP/
     cd Benchmarks/ECP/
     echo "Checkout or update the git containing the source code"
     if [ -e ExaMiniMD ] ; then
        cd ExaMiniMD ; git reset --hard master ; git clean -dfx ; git pull ; cd ..
     else
        git clone --depth=1 https://github.com/ECP-copa/ExaMiniMD.git
     fi

     echo "Install the modified sources"
     cp ../../src/common/* ./ExaMiniMD/src
     cd ExaMiniMD/src

     echo "Compile it"
     make -j KOKKOS_ARCH=SNB KOKKOS_DEVICES=Serial CXX=smpicxx MPI=1

     echo "Run it"
     smpirun -np 2 -hostfile ./cluster_hostfile.txt -platform ./cluster_crossbar.xml -bind-to socket ./ExaMiniMD -il ../input/in.lj --comm-type MPI --kokkos-threads=12 

 #+END_SRC

* Emacs settings
# Local Variables:
# eval:    (org-babel-do-load-languages 'org-babel-load-languages '( (shell . t) (R . t) (perl . t) (ditaa . t) ))
# eval:    (setq org-confirm-babel-evaluate nil)
# eval:    (setq org-alphabetical-lists t)
# eval:    (setq org-src-fontify-natively t)
# eval:    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
# eval:    (add-hook 'org-mode-hook 'org-display-inline-images)
# eval:    (add-hook 'org-mode-hook 'org-babel-result-hide-all)
# eval:    (setq org-babel-default-header-args:R '((:session . "org-R")))
# eval:    (setq org-export-babel-evaluate nil)
# eval:    (setq ispell-local-dictionary "american")
# eval:    (setq org-export-latex-table-caption-above nil)
# eval:    (eval (flyspell-mode t))
# End:
